import configparser
import asyncio
import tools
import aiogram.utils.exceptions
import database
import aiosqlite
from aiogram import Bot, Dispatcher
from aiogram.dispatcher.filters import Command, ChatTypeFilter, AdminFilter, IsReplyFilter
from aiogram import types
from datetime import datetime, timedelta

config = configparser.ConfigParser()
config.read("config.ini")

bot = Bot(token=config["BOT"]["TOKEN"])
dp = Dispatcher(bot)

db = database.db





@dp.message_handler(commands=["start"])
async def start(msg):
    await database.update_db(msg, bot)
    if msg.chat.id > 0:
        await msg.reply("–ø—Ä–∏–≤–µ—Ç! —è —Ä–∞–±–æ—Ç–∞—é –≤ –≥—Ä—É–ø–ø–∞—Ö")
        return

    await bot.send_message(msg.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ –∏ –ø–æ–º–æ–≥–∞—é –∞–¥–º–∏–Ω–∏—Å—Ç–∞—Ç–æ—Ä–∞–º –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞!")


@dp.message_handler(Command("ban") | Command("dban"),
                    ChatTypeFilter(types.ChatType.GROUP) | ChatTypeFilter(types.ChatType.SUPERGROUP),
                    AdminFilter(True), IsReplyFilter(True))
async def ban(msg):
    await database.update_db(msg, bot)
    user_data = await bot.get_chat_member(msg.chat.id, msg.from_user.id)
    if not user_data["can_restrict_members"]:
        await msg.reply("–≤—ã –Ω–µ –∞–¥–º–∏–Ω!")
        return

    if await tools.is_admin(msg.chat.id, msg.reply_to_message.from_user.id, bot):
        await msg.reply(f"–∑–∞–±–∞–Ω–∏—Ç—å –Ω–µ –≤—ã–π–¥–µ—Ç, —Ç–∞–∫ –∫–∞–∫ @{msg.reply_to_message.from_user.username} - –∞–¥–º–∏–Ω")
        return

    await asyncio.gather(bot.ban_chat_member(msg.chat.id, msg.reply_to_message.from_user.id),
                         bot.send_message(msg.chat.id, "–º–Ω–µ —Ç–µ–±—è –∂–∞–ª—å üò¢"))
    if msg.text.startswith("/dban"):
        await asyncio.gather(bot.delete_message(msg.chat.id, msg.reply_to_message.message_id),
                             bot.delete_message(msg.chat.id, msg.message_id))


@dp.message_handler(Command("unban"),
                    ChatTypeFilter(types.ChatType.GROUP) | ChatTypeFilter(types.ChatType.SUPERGROUP),
                    AdminFilter(True), IsReplyFilter(True))
async def unban(msg):
    await database.update_db(msg, bot)
    user_data = await bot.get_chat_member(msg.chat.id, msg.from_user.id)
    if not user_data["can_restrict_members"]:
        await msg.reply("–≤—ã –Ω–µ –∞–¥–º–∏–Ω!")
        return
    await bot.unban_chat_member(msg.chat.id, msg.reply_to_message.from_user.id)
    try:
        await bot.send_message(msg.reply_to_message.from_user.id, (await bot.get_chat(msg.chat.id))["invite_link"])
    except (aiogram.utils.exceptions.BotBlocked, aiogram.utils.exceptions.CantInitiateConversation) as e:
        await bot.send_message(msg.chat.id,
                               "–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É –∫—Ç–æ-–Ω–∏–±—É–¥—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ -> " + (await bot.get_chat(msg.chat.id))[
                                   "invite_link"])
    await bot.send_message(msg.chat.id, "—É—Ä–∞!!!")


@dp.message_handler(commands=['–º—É—Ç', 'mute'], commands_prefix='./', is_chat_admin=True)
async def mute(msg):
    await database.update_db(msg, bot)


    rep = lambda: msg.reply(
            f'<b>–∑–∞–º—É—Ç–∏–ª:</b> {name1}\n<b>–∞–Ω—Å–∫–∏–ª–ª:</b> <a href="tg://user?id={msg.reply_to_message.from_user.id}">{msg.reply_to_message.from_user.first_name}</a>\n<b>—Å—Ä–æ–∫ –Ω–∞–∫–∞–∑–∞–Ω–∏—è:</b> {muteint} {mutetype}\n<b>–ø—Ä–∏—á–∏–Ω–∞:</b> {comment}',
            parse_mode='html')

    name1 = msg.from_user.get_mention(as_html=True)
    user_data = await bot.get_chat_member(msg.chat.id, msg.from_user.id)
    if not user_data["can_restrict_members"]:
        await msg.reply("–≤—ã –Ω–µ –∞–¥–º–∏–Ω!")
        return
    if not msg.reply_to_message:
        await msg.reply("—ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        return

    if await tools.is_admin(msg.chat.id, msg.reply_to_message.from_user.id, bot):
        await msg.reply(f"–∑–∞–º—É—Ç–∏—Ç—å –Ω–µ –≤—ã–π–¥–µ—Ç, —Ç–∞–∫ –∫–∞–∫ @{msg.reply_to_message.from_user.username} - –∞–¥–º–∏–Ω")
        return

    try:
        muteint = int(msg.text.split()[1])
        mutetype = msg.text.split()[2]
        comment = " ".join(msg.text.split()[3:])
    except IndexError:
        await msg.reply('–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!\n–ü—Ä–∏–º–µ—Ä:\n`/–º—É—Ç 1 —á –ø—Ä–∏—á–∏–Ω–∞`')
        return
    if mutetype == "—á" or mutetype == "—á–∞—Å–æ–≤" or mutetype == "—á–∞—Å":
        dt = datetime.now() + timedelta(hours=muteint)
        timestamp = dt.timestamp()
        await bot.restrict_chat_member(msg.chat.id, msg.reply_to_message.from_user.id,
                                       types.ChatPermissions(False), until_date=timestamp)
        await rep()
    elif mutetype == "–º" or mutetype == "–º–∏–Ω—É—Ç" or mutetype == "–º–∏–Ω—É—Ç—ã":
        dt = datetime.now() + timedelta(minutes=muteint)
        timestamp = dt.timestamp()
        await bot.restrict_chat_member(msg.chat.id, msg.reply_to_message.from_user.id,
                                       types.ChatPermissions(False), until_date=timestamp)
        await rep()
    elif mutetype == "–¥" or mutetype == "–¥–Ω–µ–π" or mutetype == "–¥–µ–Ω—å":
        dt = datetime.now() + timedelta(days=muteint)
        timestamp = dt.timestamp()
        await bot.restrict_chat_member(msg.chat.id, msg.reply_to_message.from_user.id,
                                       types.ChatPermissions(False), until_date=timestamp)
        await rep()


@dp.message_handler(ChatTypeFilter(types.ChatType.GROUP) | ChatTypeFilter(types.ChatType.SUPERGROUP))
async def other(msg):
    await database.update_db(msg, bot)


async def event_handler():
    while True:
        for event in await db.execute("SELECT (event_id, chat_id, user_id, additional_info, date_of_execution) FROM events;"):
            pass


async def main():
    await database.get_db_ready()
    await dp.start_polling()


if __name__ == "__main__":
    asyncio.run(main())
